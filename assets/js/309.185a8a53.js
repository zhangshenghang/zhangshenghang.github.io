(window.webpackJsonp=window.webpackJsonp||[]).push([[309],{673:function(a,e,t){"use strict";t.r(e);var r=t(8),i=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"dataframe函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dataframe函数"}},[a._v("#")]),a._v(" DataFrame函数")]),a._v(" "),e("p",[a._v("[toc]")]),a._v(" "),e("h3",{attrs:{id:"dataframe-的函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dataframe-的函数"}},[a._v("#")]),a._v(" DataFrame 的函数")]),a._v(" "),e("h4",{attrs:{id:"action-操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action-操作"}},[a._v("#")]),a._v(" Action 操作")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("collect() ,返回值是一个数组，返回dataframe集合所有的行")])]),a._v(" "),e("li",[e("p",[a._v("collectAsList() 返回值是一个java类型的数组，返回dataframe集合所有的行")])]),a._v(" "),e("li",[e("p",[a._v("count() 返回一个number类型的，返回dataframe集合的行数")])]),a._v(" "),e("li",[e("p",[a._v('describe(cols: String*) 返回一个通过数学计算的类表值(count, mean, stddev, min, and max)，这个可以传多个参数，中间用逗号分隔，如果有字段为空，那么不参与运算，只这对数值类型的字段。例如df.describe("age", "height").show()*')])]),a._v(" "),e("li",[e("p",[a._v("first() 返回第一行 ，类型是row类型")])]),a._v(" "),e("li",[e("p",[a._v("head() 返回第一行 ，类型是row类型")])]),a._v(" "),e("li",[e("p",[a._v("head(n:Int)返回n行  ，类型是row 类型")])]),a._v(" "),e("li",[e("p",[a._v("show()返回dataframe集合的值 默认是20行，返回类型是unit")])]),a._v(" "),e("li",[e("p",[a._v("show(n:Int)返回n行，，返回值类型是unit")])]),a._v(" "),e("li",[e("p",[a._v("table(n:Int) 返回n行  ，类型是row 类型")])])]),a._v(" "),e("h4",{attrs:{id:"dataframe的基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dataframe的基本操作"}},[a._v("#")]),a._v(" dataframe的基本操作")]),a._v(" "),e("ul",[e("li",[a._v("cache()同步数据的内存")]),a._v(" "),e("li",[a._v("columns 返回一个string类型的数组，返回值是所有列的名字")]),a._v(" "),e("li",[a._v("dtypes返回一个string类型的二维数组，返回值是所有列的名字以及类型")]),a._v(" "),e("li",[a._v("explan()打印执行计划物理的")]),a._v(" "),e("li",[a._v("explain(n:Boolean) 输入值为 false 或者true ，返回值是unit  默认是false ，如果输入true 将会打印 逻辑的和物理的")]),a._v(" "),e("li",[a._v("isLocal 返回值是Boolean类型，如果允许模式是local返回true 否则返回false")]),a._v(" "),e("li",[a._v("persist(newlevel:StorageLevel) 返回一个dataframe.this.type 输入存储模型类型")]),a._v(" "),e("li",[a._v("printSchema() 打印出字段名称和类型 按照树状结构来打印")]),a._v(" "),e("li",[a._v("registerTempTable(tablename:String) 返回Unit ，将df的对象只放在一张表里面，这个表随着对象的删除而删除了")]),a._v(" "),e("li",[a._v("schema 返回structType 类型，将字段名称和类型按照结构体类型返回")]),a._v(" "),e("li",[a._v("toDF()返回一个新的dataframe类型的")]),a._v(" "),e("li",[a._v("toDF(colnames：String*)将参数中的几个字段返回一个新的dataframe类型的")]),a._v(" "),e("li",[a._v("unpersist() 返回dataframe.this.type 类型，去除模式中的数据")]),a._v(" "),e("li",[a._v("unpersist(blocking:Boolean)返回dataframe.this.type类型 true 和unpersist是一样的作用false 是去除RDD")])]),a._v(" "),e("h4",{attrs:{id:"集成查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成查询"}},[a._v("#")]),a._v(" 集成查询")]),a._v(" "),e("ul",[e("li",[a._v('agg(expers:column*) 返回dataframe类型 ，同数学计算求值\ndf.agg(max("age"), avg("salary"))\ndf.groupBy().agg(max("age"), avg("salary"))*')]),a._v(" "),e("li",[a._v('agg(exprs: Map[String, String])  返回dataframe类型 ，同数学计算求值 map类型的\ndf.agg(Map("age" -> "max", "salary" -> "avg"))\ndf.groupBy().agg(Map("age" -> "max", "salary" -> "avg"))')]),a._v(" "),e("li",[a._v("agg(aggExpr: (String, String), aggExprs: (String, String)"),e("em",[a._v(')  返回dataframe类型 ，同数学计算求值\ndf.agg(Map("age" -> "max", "salary" -> "avg"))\ndf.groupBy().agg(Map("age" -> "max", "salary" -> "avg"))')])]),a._v(" "),e("li",[a._v("apply(colName: String) 返回column类型，捕获输入进去列的对象")]),a._v(" "),e("li",[a._v("as(alias: String) 返回一个新的dataframe类型，就是原来的一个别名")]),a._v(" "),e("li",[a._v("col(colName: String)  返回column类型，捕获输入进去列的对象")]),a._v(" "),e("li",[a._v("cube(col1: String, cols: String*) 返回一个GroupedData类型，根据某些字段来汇总*")]),a._v(" "),e("li",[a._v("distinct 去重 返回一个dataframe类型")]),a._v(" "),e("li",[a._v("drop(col: Column) 删除某列 返回dataframe类型")]),a._v(" "),e("li",[a._v("dropDuplicates(colNames: Array[String]) 删除相同的列 返回一个dataframe")]),a._v(" "),e("li",[a._v("except(other: DataFrame) 返回一个dataframe，返回在当前集合存在的在其他集合不存在的")]),a._v(" "),e("li",[a._v('explode[A, B](inputColumn: String, outputColumn: String)(f: (A) ⇒ TraversableOnce[B])(implicit arg0: scala.reflect.api.JavaUniverse.TypeTag[B]) 返回值是dataframe类型，这个 将一个字段进行更多行的拆分\ndf.explode("name","names") {name :String=> name.split(" ")}.show();\n将name字段根据空格来拆分，拆分的字段放在names里面')]),a._v(" "),e("li",[a._v('filter(conditionExpr: String): 刷选部分数据，返回dataframe类型 df.filter("age>10").show();  df.filter(df("age")>10).show();   df.where(df("age")>10).show(); 都可以')]),a._v(" "),e("li",[a._v('groupBy(col1: String, cols: String*) 根据某写字段来汇总返回groupedate类型   df.groupBy("age").agg(Map("age" ->"count")).show();df.groupBy("age").avg().show();都可以*')]),a._v(" "),e("li",[a._v("intersect(other: DataFrame) 返回一个dataframe，在2个dataframe都存在的元素")]),a._v(" "),e("li",[a._v('join(right: DataFrame, joinExprs: Column, joinType: String)\n一个是关联的dataframe，第二个关联的条件，第三个关联的类型：inner, outer, left_outer, right_outer, leftsemi\ndf.join(ds,df("name")===ds("name") and  df("age")===ds("age"),"outer").show();')]),a._v(" "),e("li",[a._v("limit(n: Int) 返回dataframe类型  去n 条数据出来")]),a._v(" "),e("li",[a._v("na: DataFrameNaFunctions ，可以调用dataframenafunctions的功能区做过滤 df.na.drop().show(); 删除为空的行")]),a._v(" "),e("li",[a._v("orderBy(sortExprs: Column*) 做alise排序*")]),a._v(" "),e("li",[a._v('select(cols:string*) dataframe 做字段的刷选 df.select($"colA", $"colB" + 1)*')]),a._v(" "),e("li",[a._v('selectExpr(exprs: String*) 做字段的刷选 df.selectExpr("name","name as names","upper(name)","age+1").show();*')]),a._v(" "),e("li",[a._v('sort(sortExprs: Column*) 排序 df.sort(df("age").desc).show(); 默认是asc')]),a._v(" "),e("li",[a._v("unionAll(other:Dataframe) 合并 df.unionAll(ds).show();")]),a._v(" "),e("li",[a._v('withColumnRenamed(existingName: String, newName: String) 修改列表 df.withColumnRenamed("name","names").show();')]),a._v(" "),e("li",[a._v('withColumn(colName: String, col: Column) 增加一列 df.withColumn("aa",df("name")).show();')])])])}),[],!1,null,null,null);e.default=i.exports}}]);